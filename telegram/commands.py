from time import time
from typing import Optional
from .state import CURRENT_DIALOGUE as diag, DialogueTy
from .tgcore import BOT, POSTER_IMG
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters.callback_data import CallbackData
from models.activation import CURRENT_ACTIVATOR, ActivationThing, RFIDActivation
import re

dp = Router()
# from .tgcore import dispatcher as dp


@dp.message(Command("start"))
async def start(msg: Message) -> None:
    await msg.reply_photo(
        photo=POSTER_IMG,
        caption="<b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é RFID ‚òïÔ∏è</b>\n\n"
        + "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–∫–∞–∑–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤–æ—Ä—É–µ—Ç –í–∞—à—É –∫—Ä—É–∂–∫—É ‚ú®\n\n–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º—É –ø—Ä–æ–µ–∫—Ç—É:\n"
        + "üí≥ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /changecard\n"
        + "üì© –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: /help\n",
    )


@dp.message(Command("help"))
async def help(msg: Message) -> None:
    await msg.reply(
        "<b>üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
        + "<b>I –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã</b>\n"
        + "1. –ù–∞–ø–∏—à–∏—Ç–µ /changecard\n"
        + "2. –ü–æ–¥–Ω–µ—Å–∏—Ç–µ –∫–∞—Ä—Ç—É –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü–†–ê–í–£–Æ –∫–Ω–æ–ø–∫—É\n"
        + "3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑. –ï—Å–ª–∏ –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @platfoxxx\n\n"
        + "<b>II –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–∂–µ–∫</b>\n"
        + "1. –ù–∞–ø–∏—à–∏—Ç–µ /newmug\n"
        + "2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–∑–º–µ–Ω–∏—Ç–µ –∏–º—è –∫—Ä—É–∂–∫–∏\n"
        + "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –≤ –±–æ—Ç–µ\n"
        + "4. –ü–æ–¥–Ω–µ—Å–∏—Ç–µ –∫—Ä—É–∂–∫—É –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ü–†–ê–í–£–Æ –∫–Ω–æ–ø–∫—É\n\n"
        + "<b>III –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫—Ä—É–∂–µ–∫</b>\n"
        + "1. –ù–∞–ø–∏—à–∏—Ç–µ /mugs\n"
        + "2. –í—ã–±–µ—Ä–µ—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω—É–∂–Ω—ã–µ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—è\n"
        + "3. –ï—Å–ª–∏ –≤—Å—ë –ø—Ä—è–º —Å–æ–≤—Å–µ–º –ø–µ—á–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ @platfoxxx\n\n"
        + "üì© –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä—è–º —Å–ª–æ–º–∞–ª–æ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @platfoxxx",
    )


def escapeHTML(s: str) -> str:
    return s.replace("<", "&lt;").replace(">", "&gt;").replace("&", "&amp;")


def normalize_mug_name(name: str) -> Optional[str]:
    name = re.sub(r"[^A-Za-z–∞-—è–ê-–Ø—ë–Å ,.0-9\-]", "", name.strip())
    name = name[:19].strip()
    return name if len(name) > 0 else None


class CancelActivationQuery(CallbackData, prefix="v1+ca"):
    user_id: int


class ChangeMugNameQuery(CallbackData, prefix="v1+cmn"):
    mug_id: int = 0

    def is_new_mug(self):
        return self.mug_id == 0


class CancelDialogueQuery(CallbackData, prefix="v1+cd"):
    pass


class RegisterMugQuery(CallbackData, prefix="v1+rm"):
    name: str


@dp.message(Command("changecard"))
async def changecard(message: Message) -> None:
    global CURRENT_ACTIVATOR
    if not CURRENT_ACTIVATOR.is_outdated():
        df = int(45 + CURRENT_ACTIVATOR.created_at - time()) + 1
        await message.reply(
            f"‚úã –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë <b>{df} —Å–µ–∫—É–Ω–¥</b>."
        )
        return
    m = await message.reply(
        "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã üí≥</b>\n\n"
        + "–ü–æ–¥–Ω–µ—Å–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=CancelActivationQuery(
                            user_id=message.chat.id
                        ).pack(),
                    )
                ]
            ]
        ),
    )

    telegram_name = message.chat.full_name

    async def callback(act: RFIDActivation):
        global BOT
        await BOT.edit_message_text(
            "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã üí≥</b>\n\n"
            + "–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∫—Ä—É–∂–∫—É –∏—Å–ø–æ–ª—å–∑—É—è /newmug",
            act.user_id,
            act.msg_id,
        )
        # NOTE: optimize?
        conn = await get_connection()
        await conn.execute(
            "UPDATE users SET telegram_name = ? WHERE telegram_id = ?",
            [telegram_name, act.user_id],
        )
        await commit_changes()

    CURRENT_ACTIVATOR.set(
        ty=ActivationThing.UpdateCard,
        user_id=message.chat.id,
        msg_id=m.message_id,
        callback=callback,
    )


async def send_newmug_confirmation(msg: Message, mug_name: Optional[str]):
    if not mug_name:
        mug_name = "–ö—Ä—É–∂–∫–∞"
    await msg.reply(
        "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–∂–∫–∏ ‚òïÔ∏è</b>\n\n"
        + "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∫—Ä—É–∂–∫—É –∫–∞–∫ —Å–≤–æ—é.\n"
        + (f"–ï—ë –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{escapeHTML(mug_name)}</b>"),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=ChangeMugNameQuery().pack()
                    ),
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=RegisterMugQuery(name=mug_name).pack(),
                    ),
                ]
            ]
        ),
    )


from database import commit_changes, get_connection


@dp.message(Command("newmug"))
async def newmug(msg: Message) -> None:
    conn = await get_connection()
    await conn.execute(
        "select count(1) from users where telegram_id = ?", [msg.chat.id]
    )
    res = (await conn.fetchone())[0]
    if res == 0:
        await msg.reply("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É: /changecard")
        return

    mug_name = (
        normalize_mug_name(msg.chat.first_name)
        if msg.chat.first_name is not None
        else "–ö—Ä—É–∂–∫–∞"
    )
    await send_newmug_confirmation(msg, mug_name)


@dp.callback_query(ChangeMugNameQuery.filter())
async def change_mug_name(query: CallbackQuery, callback_data: ChangeMugNameQuery):
    global diag
    if not callback_data.is_new_mug():
        # TODO:
        return

    async def callback(mug_name: str, msg: Message):
        global diag
        mug_name = normalize_mug_name(mug_name)
        if mug_name is None:
            await msg.reply(
                "‚ùóÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            diag.set(msg.chat.id, DialogueTy.MugRename, callback)
            return
        await send_newmug_confirmation(msg, mug_name)

    await query.message.edit_text(
        "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–∂–∫–∏ ‚òïÔ∏è</b>\n\n" + "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤–æ–µ –∏–º—è –∫—Ä—É–∂–∫–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CancelDialogueQuery().pack()
                    )
                ]
            ]
        ),
    )

    diag.set(query.message.chat.id, DialogueTy.MugRename, callback)


@dp.callback_query(CancelDialogueQuery.filter())
async def cancel_dialog_query(query: CallbackQuery):
    global diag
    diag.set(query.message.chat.id, DialogueTy.Nothing)
    await query.message.delete()


@dp.callback_query(RegisterMugQuery.filter())
async def register_mug(query: CallbackQuery, callback_data: RegisterMugQuery):
    global CURRENT_ACTIVATOR
    if not CURRENT_ACTIVATOR.is_outdated():
        df = int(45 + CURRENT_ACTIVATOR.created_at - time()) + 1
        await query.message.edit_text(
            f"‚úã –°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë <b>{df} —Å–µ–∫—É–Ω–¥</b>.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚è≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data=callback_data.pack(),
                        )
                    ]
                ]
            ),
        )
        return
    await query.message.edit_text(
        "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–∂–∫–∏ üí≥</b>\n\n"
        + "–ü–æ–¥–Ω–µ—Å–∏—Ç–µ —Å–≤–æ—é –∫—Ä—É–∂–∫—É –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É\n"
        + f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∏ <b>{escapeHTML(callback_data.name)}</b>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=CancelActivationQuery(
                            user_id=query.message.chat.id
                        ).pack(),
                    )
                ]
            ]
        ),
    )

    async def callback(act: RFIDActivation):
        global BOT
        await BOT.edit_message_text(
            "<b>‚ùØ‚ùØ‚ùØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–∂–∫–∏ ‚òïÔ∏è</b>\n\n"
            + "–ö—Ä—É–∂–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞.\n"
            + f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∏: <b>{escapeHTML(callback_data.name)}</b>",
            act.user_id,
            act.msg_id,
        )

    CURRENT_ACTIVATOR.set(
        ty=ActivationThing.CreateMug,
        user_id=query.message.chat.id,
        msg_id=query.message.message_id,
        name=callback_data.name,
        callback=callback,
    )


@dp.callback_query(CancelActivationQuery.filter())
async def kill_message(query: CallbackQuery, callback_data: CancelActivationQuery):
    global CURRENT_ACTIVATOR
    try:
        await query.message.delete()
        if callback_data.user_id == CURRENT_ACTIVATOR.user_id:
            CURRENT_ACTIVATOR.outdate()
    except:
        pass
